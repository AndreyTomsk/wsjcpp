#include "argument_processor_basic.h"
#include <wsjcpp_package_manager.h>
#include <wsjcpp_core.h>

ArgumentProcessorInfo::ArgumentProcessorInfo() 
: WSJCppArgumentProcessor("info", "information about package") {
      
}

// ---------------------------------------------------------------------

int ArgumentProcessorInfo::exec(const std::string &sProgramName, const std::vector<std::string> &vSubParams) {
    WSJCppPackageManager pkg(".");
    if (!pkg.load()) {
        WSJCppLog::err(TAG, "Could not load package info from current directory");
        return -1;
    }

    std::cout << std::endl 
        << "===== begin: wsjcpp info =====" << std::endl
        << "Name: " << pkg.getName() << std::endl
        << "Version: " << pkg.getVersion() << std::endl
        << "Description: " << pkg.getDescription()
        << std::endl;

    if (pkg.isHolded()) {
        std::cout << "Package is holded" << std::endl;
    }
    std::cout << "Directory: " << pkg.getDir() << std::endl;
    std::cout << "wsjcpp.version = " << pkg.getWSJCppVersion() << std::endl;
    // print keywords
    std::vector<std::string> vKeywords = pkg.getListOfKeywords();
    if (vKeywords.size() > 0) {
        std::cout << "Keywords: " << std::endl;
        for (unsigned int i = 0; i < vKeywords.size(); i++) {
            std::cout << " - " << vKeywords[i] << std::endl;
        }
    }

    std::vector<WSJCppPackageManagerDistributionFile> vFiles = pkg.getListOfDistributionFiles();
    if (vFiles.size() > 0) {
        std::cout << std::endl << "Distribution-Files: " << std::endl;
        for (unsigned int i = 0; i < vFiles.size(); i++) {
            WSJCppPackageManagerDistributionFile source = vFiles[i];
            std::cout << " - " << source.getSourceFile() << " -> " << source.getTargetFile() << "[" << source.getType() << "]" << std::endl;
        }
    }
    
    std::vector<WSJCppPackageManagerAuthor> vAuthors = pkg.getListOfAuthors();
    if (vAuthors.size() > 0) { 
        std::cout << std::endl << "Authors: " << std::endl;
        for (unsigned int i = 0; i < vAuthors.size(); i++) {
            WSJCppPackageManagerAuthor author = vAuthors[i];
            std::cout << " - " << author.getName() << " <" << author.getEmail() << ">" << std::endl;
        }
    }
    
    std::vector<WSJCppPackageManagerDependence> vDeps = pkg.getListOfDependencies();
    if (vDeps.size() > 0) { 
        std::cout << std::endl << "Dependencies: " << std::endl;
        for (unsigned int i = 0; i < vDeps.size(); i++) {
            WSJCppPackageManagerDependence dep = vDeps[i];
            std::cout << " - " << dep.getName() << ":" << dep.getVersion() << std::endl;
        }
    }
    

    std::cout << "===== end: wsjcpp info =====" << std::endl
        << std::endl;
    return 0;
}

// ---------------------------------------------------------------------

ArgumentProcessorInit::ArgumentProcessorInit() 
: WSJCppArgumentProcessor("init", "Init package in current directory") {
      
}

// ---------------------------------------------------------------------

int ArgumentProcessorInit::exec(const std::string &sProgramName, const std::vector<std::string> &vSubParams) {

    if (vSubParams.size() != 1) {
        WSJCppLog::err(TAG, "Expected path to project");
        // printHelp(vArgs);
        return -1;
    }
    std::string sPath = vSubParams[0];
    WSJCppPackageManager pkg(sPath);
    if (!pkg.init()) {
        WSJCppLog::err(TAG, "Could not init package in current directory");
        return -1;
    }
    pkg.save();
    if (pkg.install("https://github.com/wsjcpp/wsjcpp-core:master")) {
        pkg.save();
    }
    std::string sBuildSimplaShPath = sPath + "/build_simple.sh";
    pkg.updateAutogeneratedFiles();

    if (!WSJCppCore::fileExists(sBuildSimplaShPath)) {
        WSJCppCore::writeFile(sBuildSimplaShPath, pkg.getSampleForBuildSimpleSh());
    }

    std::string sSrcPath = sPath + "/src";
    if (!WSJCppCore::dirExists(sSrcPath)) {
        WSJCppCore::makeDir(sSrcPath);
    }

    std::string sMainCpp = sPath + "/src/main.cpp";
    if (!WSJCppCore::fileExists(sMainCpp)) {
        WSJCppCore::writeFile(sMainCpp, 
            "#include <string.h>\n"
            "#include <iostream>\n"
            "#include <algorithm>\n"
            "#include <wsjcpp_core.h>\n"
            "\n"
            "int main(int argc, const char* argv[]) {\n"
            "    std::string TAG = \"MAIN\";\n"
            "    std::string appName = std::string(WSJCPP_NAME);\n"
            "    std::string appVersion = std::string(WSJCPP_VERSION);\n"
            "    if (!WSJCppCore::dirExists(\".logs\")) {\n"
            "        WSJCppCore::makeDir(\".logs\");\n"
            "    }\n"
            "    WSJCppLog::setPrefixLogFile(\"wsjcpp\");\n"
            "    WSJCppLog::setLogDirectory(\".logs\");\n"
            "    // TODO your code here\n"
            "    return 0;\n"
            "}\n"
        );
    }

    std::string sCMakeListsTXT = sPath + "/CMakeLists.txt";
    if (!WSJCppCore::fileExists(sCMakeListsTXT)) {
        WSJCppCore::writeFile(sCMakeListsTXT, 
            "cmake_minimum_required(VERSION " + pkg.getCMakeMinimumRequired() + ")\n"
            "\n"
            "project(" + pkg.getName() + " C CXX)\n"
            "\n"
            "include(${CMAKE_CURRENT_SOURCE_DIR}/src.wsjcpp/CMakeLists.txt)\n"
            "\n"
            "set(CMAKE_CXX_STANDARD " + pkg.getCMakeCxxStandard() + ")\n"
            "set(EXECUTABLE_OUTPUT_PATH ${" + pkg.getName() + "_SOURCE_DIR})\n"
            "\n"
            "# include header dirs\n"
            "list (APPEND WSJCPP_INCLUDE_DIRS \"src\")\n"
            "\n"
            "list (APPEND WSJCPP_SOURCES \"src/main.cpp\")\n"
            "\n"
            "#### BEGIN_WSJCPP_APPEND\n"
            "#### END_WSJCPP_APPEND\n"
            "\n"
            "include_directories(${WSJCPP_INCLUDE_DIRS})\n"
            "\n"
            "add_executable (" + pkg.getName() + " ${WSJCPP_SOURCES})\n"
            "\n"
            "target_link_libraries(" + pkg.getName() + " ${WSJCPP_LIBRARIES})\n"
            "\n"
            "install(\n"
            "    TARGETS\n"
            "        " + pkg.getName() + "\n"
            "    RUNTIME DESTINATION\n"
            "        /usr/bin\n"
            ")\n"
        );
    }

    return 0;
}


// ---------------------------------------------------------------------

ArgumentProcessorClean::ArgumentProcessorClean() 
: WSJCppArgumentProcessor("clean", "Clean all packages and files for wsjcpp") {
      
}

// ---------------------------------------------------------------------

int ArgumentProcessorClean::exec(const std::string &sProgramName, const std::vector<std::string> &vSubParams) {
    std::vector<std::string> vRemoveFiles;
    vRemoveFiles.push_back("wsjcpp.yml");
    std::vector<std::string> vRemoveFolders;

    std::vector<std::string> vScanToRemoveFolders;
    vScanToRemoveFolders.push_back("src.wsjcpp");
    vScanToRemoveFolders.push_back(".wsjcpp");
    vScanToRemoveFolders.push_back("unit-tests.wsjcpp");

    while (vScanToRemoveFolders.size() > 0) {
        std::string sFolder = vScanToRemoveFolders.back();
        vScanToRemoveFolders.pop_back();
        if (WSJCppCore::dirExists(sFolder)) {
            WSJCppLog::info(TAG, "'" + sFolder + "' - scan folder");
            vRemoveFolders.push_back(sFolder);
            std::vector<std::string> vFiles = WSJCppCore::listOfFiles(sFolder);
            for (int i = 0; i < vFiles.size(); i++) {
                vRemoveFiles.push_back( sFolder + "/" + vFiles[i]);
            }
            std::vector<std::string> vFolders = WSJCppCore::listOfDirs(sFolder);
            for (int i = 0; i < vFolders.size(); i++) {
                vScanToRemoveFolders.push_back( sFolder + "/" + vFolders[i]);
            }
        }
    }
    
    while (vRemoveFiles.size() > 0) {
        std::string sFileName = vRemoveFiles.back();
        vRemoveFiles.pop_back();
        if (WSJCppCore::fileExists(sFileName)) {
            if (WSJCppCore::removeFile(sFileName)) {
                WSJCppLog::info(TAG, "'" + sFileName + "' - file removed");
            } else {
                WSJCppLog::err(TAG, "'" + sFileName + "' - file could not remove");
            }
        } else {
            WSJCppLog::info(TAG, "'" + sFileName + "' - file not found");
        }
    }

    while (vRemoveFolders.size() > 0) {
        std::string sFolder = vRemoveFolders.back();
        vRemoveFolders.pop_back();
        if (WSJCppCore::dirExists(sFolder)) {
            if (WSJCppCore::removeFile(sFolder)) {
                WSJCppLog::info(TAG, "'" + sFolder + "' - folder removed");
            } else {
                WSJCppLog::err(TAG, "'" + sFolder + "' - folder could not remove");
            }
        }
    }
    return 0;
}

// ---------------------------------------------------------------------

ArgumentProcessorVersion::ArgumentProcessorVersion() 
: WSJCppArgumentProcessor("version", "Current version of wsjcpp") {
      
}

// ---------------------------------------------------------------------

int ArgumentProcessorVersion::exec(const std::string &sProgramName, const std::vector<std::string> &vSubParams) {
    // TODO move to default arguments
    std::cout << "Application: " << std::string(WSJCPP_NAME) << std::endl;
    std::cout << "Version: " << std::string(WSJCPP_VERSION) << std::endl;
    return 0;
}

// ---------------------------------------------------------------------