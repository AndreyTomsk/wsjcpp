# Automaticly generated by wsjcpp@v0.0.1
cmake_minimum_required(VERSION 3.0)

project(unit-tests)

if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(MACOSX TRUE)
endif()

set(CMAKE_CXX_STANDARD 11)
set(EXECUTABLE_OUTPUT_PATH ${unit-tests_SOURCE_DIR})

set (WSJCPP_LIBRARIES "")
set (WSJCPP_INCLUDE_DIRS "")
set (WSJCPP_SOURCES "")

# wsjcpp-core:v0.0.4
list (APPEND WSJCPP_INCLUDE_DIRS "../src.wsjcpp/wsjcpp_core/")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_core/wsjcpp_core.cpp")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_core/wsjcpp_core.h")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_core/wsjcpp_unit_tests.cpp")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_core/wsjcpp_unit_tests.h")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_core/wsjcpp_unit_tests_main.cpp")

# wsjcpp/wsjcpp-yaml:0.0.2
list (APPEND WSJCPP_INCLUDE_DIRS "../src.wsjcpp/wsjcpp_yaml/")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_yaml/wsjcpp_yaml.cpp")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_yaml/wsjcpp_yaml.h")

# wsjcpp-arguments:v0.0.1
list (APPEND WSJCPP_INCLUDE_DIRS "../src.wsjcpp/wsjcpp_arguments/")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_arguments/wsjcpp_arguments.cpp")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_arguments/wsjcpp_arguments.h")

# wsjcpp/wsjcpp-hashes:v0.0.1
list (APPEND WSJCPP_INCLUDE_DIRS "../src.wsjcpp/wsjcpp_wsjcpp_hashes/")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_wsjcpp_hashes/md5.cpp")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_wsjcpp_hashes/md5.h")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_wsjcpp_hashes/smallsha1.h")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_wsjcpp_hashes/smallsha1.cpp")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_wsjcpp_hashes/wsjcpp_hashes.cpp")
list (APPEND WSJCPP_SOURCES "../src.wsjcpp/wsjcpp_wsjcpp_hashes/wsjcpp_hashes.h")

# wsjcpp:v0.0.1
list (APPEND WSJCPP_INCLUDE_DIRS "../src")
list (APPEND WSJCPP_SOURCES "../src/wsjcpp_package_manager.cpp")
list (APPEND WSJCPP_SOURCES "../src/wsjcpp_package_manager.h")

# unit-tests
list (APPEND WSJCPP_INCLUDE_DIRS "src")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_normalize_unit_test_name.h")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_normalize_unit_test_name.cpp")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_generate_filename_for_unit_test.h")
list (APPEND WSJCPP_SOURCES "../unit-tests.wsjcpp/src/unit_test_generate_filename_for_unit_test.cpp")

# required-libraries
list (APPEND WSJCPP_LIBRARIES "-lpthread")

# required-pkg-config
## CURL
FIND_PACKAGE(CURL)
IF(CURL_FOUND)
   list (APPEND WSJCPP_INCLUDE_DIRS ${CURL_INCLUDE_DIR})
   list (APPEND WSJCPP_LIBRARIES ${CURL_LIBRARIES})
ELSE(CURL_FOUND)
   MESSAGE(FATAL_ERROR "Could not find the CURL library and development files.")
ENDIF(CURL_FOUND)


include_directories(${WSJCPP_INCLUDE_DIRS})

add_executable ("unit-tests" ${WSJCPP_SOURCES})

target_link_libraries("unit-tests" -lpthread ${WSJCPP_LIBRARIES} )

install(
    TARGETS
        "unit-tests"
    RUNTIME DESTINATION
        /usr/bin
)

